{
  "language": "Solidity",
  "sources": {
    "contracts/Adminable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nabstract contract Adminable {\n    event AdminUpdated(address sender, address oldAdmin, address admin);\n\n    address public admin;\n\n    modifier onlyAdmin() {\n        require(admin == msg.sender, \"only admin\");\n        _;\n    }\n\n    function updateAdmin(address admin_) external onlyAdmin {\n        require(admin_ != address(0), \"zero address\");\n        emit AdminUpdated(msg.sender, admin, admin_);\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nlibrary ECDSA {\n    function recover(\n        bytes32 hash_,\n        bytes memory signature_\n    ) internal pure returns (address) {\n        require(signature_.length == 65, \"standart signature only\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature_, 32))\n            s := mload(add(signature_, 64))\n            v := byte(0, mload(add(signature_, 96)))\n        }\n\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert(\"invalid signature 's' value\");\n        }\n        if (v != 27 && v != 28) {\n            revert(\"invalid signature 'v' value\");\n        }\n\n        address signer = ecrecover(hash_, v, r, s);\n        require(signer != address(0), \"invalide signature\");\n        return signer;\n    }\n}\n"
    },
    "contracts/Executorv2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Initializable.sol\";\nimport \"./Pausable.sol\";\nimport \"./ECDSA.sol\";\nimport \"./Mutex.sol\";\n\ncontract ExecutorV2 is Initializable, Pausable, Mutex {\n    uint16 public chainId;\n    address public protocolSigner;\n    mapping(bytes32 => uint256) public hashes;\n\n    event SignerUpdated(address sender, address oldSigner, address signer);\n\n    function init(\n        address admin_,\n        uint16 chainId_,\n        address signer_\n    ) external whenNotInitialized {\n        require(admin_ != address(0), \"zero address\");\n        require(signer_ != address(0), \"zero address\");\n        admin = admin_;\n        pauser = admin_;\n        chainId = chainId_;\n        protocolSigner = signer_;\n        isInited = true;\n    }\n\n    function updateSigner(address signer_) external whenInitialized onlyAdmin {\n        require(signer_ != address(0), \"zero address\");\n        emit SignerUpdated(msg.sender, protocolSigner, signer_);\n        protocolSigner = signer_;\n    }\n\n    function execute(\n        uint16 callerChainId_,\n        uint16 executionChainId_,\n        uint256 nonce_,\n        string calldata txHash_,\n        address contract_,\n        bytes calldata callData_,\n        bytes calldata signature_\n    ) external whenNotPaused whenInitialized mutex returns (bytes memory) {\n        require(chainId == executionChainId_, \"uncompatible chain\");\n        require(contract_ != address(0), \"zero address\");\n\n        bytes32 data = keccak256(\n            abi.encodePacked(\n                callerChainId_,\n                executionChainId_,\n                nonce_,\n                bytes(txHash_).length,\n                txHash_,\n                contract_,\n                callData_.length,\n                callData_\n            )\n        );\n\n        require(hashes[data] == 0, \"duplicate data\");\n        require(\n            ECDSA.recover(\n                keccak256(\n                    abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data)\n                ),\n                signature_\n            ) == protocolSigner,\n            \"only protocol signer\"\n        );\n        hashes[data] = block.number;\n\n        (bool success_, bytes memory data_) = contract_.call(callData_);\n        if (success_) {\n            return data_;\n        } else {\n            if (data_.length > 0) {\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(data_)\n                    revert(add(32, data_), returndata_size)\n                }\n            } else {\n                revert(\"no error\");\n            }\n        }\n    }\n}\n"
    },
    "contracts/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nabstract contract Initializable {\n    bool internal isInited;\n\n    modifier whenInitialized() {\n        require(isInited, \"not initialized\");\n        _;\n    }\n\n    modifier whenNotInitialized() {\n        require(!isInited, \"already initialized\");\n        _;\n    }\n}\n"
    },
    "contracts/Mutex.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nabstract contract Mutex {\n    bool private _lock;\n\n    modifier mutex() {\n        require(!_lock, \"mutex lock\");\n        _lock = true;\n        _;\n        _lock = false;\n    }\n}\n"
    },
    "contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Adminable.sol\";\n\nabstract contract Pausable is Adminable {\n    event Paused(address account);\n    event Unpaused(address account);\n    event PauserUpdated(address sender, address oldPauser, address pauser);\n\n    bool public isPaused;\n    address public pauser;\n\n    constructor() {\n        isPaused = false;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused, \"paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(isPaused, \"not paused\");\n        _;\n    }\n\n    modifier onlyPauser() {\n        require(pauser == msg.sender, \"only pauser\");\n        _;\n    }\n\n    function pause() external whenNotPaused onlyPauser {\n        isPaused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() external whenPaused onlyPauser {\n        isPaused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    function updatePauser(address pauser_) external onlyAdmin {\n        require(pauser_ != address(0), \"zero address\");\n        emit PauserUpdated(msg.sender, pauser, pauser_);\n        pauser = pauser_;\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}