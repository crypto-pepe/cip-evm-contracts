{
  "language": "Solidity",
  "sources": {
    "contracts/AbstractCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./AllowedList.sol\";\nimport \"./Initializable.sol\";\nimport \"./Pausable.sol\";\n\nabstract contract AbstractCaller is AllowedList, Initializable, Pausable {\n    uint16 public chainId;\n    uint256 public nonce;\n}\n"
    },
    "contracts/Adminable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nabstract contract Adminable {\n    event AdminUpdated(address sender, address oldAdmin, address admin);\n\n    address public admin;\n\n    modifier onlyAdmin() {\n        require(admin == msg.sender, \"only admin\");\n        _;\n    }\n\n    function updateAdmin(address admin_) external onlyAdmin {\n        require(admin_ != address(0), \"zero address\");\n        emit AdminUpdated(msg.sender, admin, admin_);\n        admin = admin_;\n    }\n}\n"
    },
    "contracts/AllowedList.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Adminable.sol\";\n\nabstract contract AllowedList is Adminable {\n    mapping(address => bool) public allowance;\n\n    function allow(address caller_) external onlyAdmin {\n        allowance[caller_] = true;\n    }\n\n    function disallow(address caller_) external onlyAdmin {\n        allowance[caller_] = false;\n    }\n\n    modifier whenAllowed(address member) {\n        require(allowance[member], \"not allowed\");\n        _;\n    }\n}\n"
    },
    "contracts/ECDSA.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nlibrary ECDSA {\n    function recover(\n        bytes32 hash_,\n        bytes memory signature_\n    ) internal pure returns (address) {\n        require(signature_.length == 65, \"standart signature only\");\n\n        bytes32 r;\n        bytes32 s;\n        uint8 v;\n        assembly {\n            r := mload(add(signature_, 32))\n            s := mload(add(signature_, 64))\n            v := byte(0, mload(add(signature_, 96)))\n        }\n\n        if (\n            uint256(s) >\n            0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0\n        ) {\n            revert(\"invalid signature 's' value\");\n        }\n        if (v != 27 && v != 28) {\n            revert(\"invalid signature 'v' value\");\n        }\n\n        address signer = ecrecover(hash_, v, r, s);\n        require(signer != address(0), \"invalide signature\");\n        return signer;\n    }\n}\n"
    },
    "contracts/Executor.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Initializable.sol\";\nimport \"./Pausable.sol\";\nimport \"./ECDSA.sol\";\nimport \"./Mutex.sol\";\n\ncontract Executor is Initializable, Pausable, Mutex {\n    uint16 public chainId;\n    address public protocolSigner;\n    mapping(bytes32 => uint256) public hashes;\n\n    event SignerUpdated(address sender, address oldSigner, address signer);\n\n    function init(\n        address admin_,\n        uint16 chainId_,\n        address signer_\n    ) external whenNotInitialized {\n        require(admin_ != address(0), \"zero address\");\n        require(signer_ != address(0), \"zero address\");\n        admin = admin_;\n        pauser = admin_;\n        chainId = chainId_;\n        protocolSigner = signer_;\n        isInited = true;\n    }\n\n    function updateSigner(address signer_) external whenInitialized onlyAdmin {\n        require(signer_ != address(0), \"zero address\");\n        emit SignerUpdated(msg.sender, protocolSigner, signer_);\n        protocolSigner = signer_;\n    }\n\n    function execute(\n        uint16 callerChainId_,\n        uint16 executionChainId_,\n        uint256 nonce_,\n        string calldata txHash_,\n        address contract_,\n        bytes calldata callData_,\n        bytes calldata signature_\n    ) external whenNotPaused whenInitialized mutex returns (bytes memory) {\n        require(chainId == executionChainId_, \"uncompatible chain\");\n        require(contract_ != address(0), \"zero address\");\n\n        bytes32 data = keccak256(\n            abi.encodePacked(\n                callerChainId_,\n                executionChainId_,\n                nonce_,\n                txHash_,\n                contract_,\n                callData_\n            )\n        );\n\n        require(hashes[data] == 0, \"duplicate data\");\n        require(\n            ECDSA.recover(\n                keccak256(\n                    abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data)\n                ),\n                signature_\n            ) == protocolSigner,\n            \"only protocol signer\"\n        );\n        hashes[data] = block.number;\n\n        (bool success_, bytes memory data_) = contract_.call(callData_);\n        if (success_) {\n            return data_;\n        } else {\n            if (data_.length > 0) {\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(data_)\n                    revert(add(32, data_), returndata_size)\n                }\n            } else {\n                revert(\"no error\");\n            }\n        }\n    }\n}\n"
    },
    "contracts/ExecutorStub.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\ncontract ExecutorStub {\n    event SignatureBytes(bytes32 data);\n\n    function execute(\n        uint16 callerChainId_,\n        uint16 executionChainId_,\n        uint256 nonce_,\n        string calldata txHash_,\n        address contract_,\n        bytes calldata callData_\n    ) external {\n        bytes32 data = keccak256(\n            abi.encodePacked(\n                callerChainId_,\n                executionChainId_,\n                nonce_,\n                txHash_,\n                contract_,\n                callData_\n            )\n        );\n\n        emit SignatureBytes(\n            keccak256(\n                abi.encodePacked(\"\\x19Ethereum Signed Message:\\n32\", data)\n            )\n        );\n    }\n}\n"
    },
    "contracts/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nabstract contract Initializable {\n    bool internal isInited;\n\n    modifier whenInitialized() {\n        require(isInited, \"not initialized\");\n        _;\n    }\n\n    modifier whenNotInitialized() {\n        require(!isInited, \"already initialized\");\n        _;\n    }\n}\n"
    },
    "contracts/Multisig.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \".//Initializable.sol\";\n\ncontract Multisig is Initializable {\n    struct Transaction {\n        address dst;\n        uint256 value;\n        bytes data;\n        bool isExecuted;\n        uint256 blockNumber;\n    }\n\n    uint128 public quorum;\n    uint128 public ttl;\n    uint256 public txsCount;\n    mapping(uint256 => Transaction) public txs;\n    mapping(uint256 => mapping(address => bool)) public confirms;\n    mapping(address => bool) public isAdmin;\n    address[] public admins;\n\n    event Submission(uint256 indexed txId);\n    event Confirmation(address indexed sender, uint256 indexed txId);\n    event Revocation(address indexed sender, uint256 indexed txId);\n    event Execution(uint256 indexed txId, address caller);\n    event QuorumChange(uint128 quorum);\n    event AdminAddition(address indexed admin);\n    event AdminRemoval(address indexed admin);\n\n    modifier onlySelf() {\n        require(msg.sender == address(this), \"only self\");\n        _;\n    }\n\n    modifier onlyAdmin(address admin_) {\n        require(isAdmin[admin_], \"only admin\");\n        _;\n    }\n\n    modifier whenNotConfirmed(uint256 txId_, address admin_) {\n        require(!confirms[txId_][admin_], \"tx is confirmed\");\n        _;\n    }\n\n    modifier whenNotExecuted(uint256 txId_) {\n        require(!txs[txId_].isExecuted, \"tx is executed\");\n        _;\n    }\n\n    modifier quorumIsValid(uint256 adminsCount_, uint256 quorum_) {\n        require(\n            quorum_ <= adminsCount_ && quorum_ != 0 && adminsCount_ != 0,\n            \"invalid quorum\"\n        );\n        _;\n    }\n\n    function init(\n        address[] memory admins_,\n        uint128 quorum_,\n        uint128 ttl_\n    ) external quorumIsValid(admins_.length, quorum_) whenNotInitialized {\n        for (uint256 i = 0; i < admins_.length; i++) {\n            address admin = admins_[i];\n            require(admin != address(0), \"zero address\");\n            require(!isAdmin[admin], \"admin is duplicated\");\n            isAdmin[admin] = true;\n        }\n\n        admins = admins_;\n        quorum = quorum_;\n        ttl = ttl_;\n        isInited = true;\n    }\n\n    receive() external payable {}\n\n    function addAdmin(\n        address admin_\n    ) external onlySelf quorumIsValid(admins.length + 1, quorum) {\n        require(admin_ != address(0), \"zero address\");\n        require(!isAdmin[admin_], \"only not admin\");\n        isAdmin[admin_] = true;\n        admins.push(admin_);\n        emit AdminAddition(admin_);\n    }\n\n    function removeAdmin(address admin_) external onlySelf onlyAdmin(admin_) {\n        isAdmin[admin_] = false;\n        for (uint256 i = 0; i < admins.length - 1; i++) {\n            if (admins[i] == admin_) {\n                admins[i] = admins[admins.length - 1];\n                break;\n            }\n        }\n        admins.pop();\n        if (quorum > admins.length) {\n            setQuorum(uint128(admins.length));\n        }\n        emit AdminRemoval(admin_);\n    }\n\n    function setQuorum(\n        uint128 quorum_\n    ) public onlySelf quorumIsValid(admins.length, quorum_) {\n        quorum = quorum_;\n        emit QuorumChange(quorum_);\n    }\n\n    function submitTransaction(\n        address dst_,\n        uint256 value_,\n        bytes calldata calldata_\n    ) external onlyAdmin(msg.sender) returns (uint256 txId) {\n        require(dst_ != address(0), \"zero address\");\n        txId = txsCount;\n        txs[txId] = Transaction({\n            dst: dst_,\n            value: value_,\n            data: calldata_,\n            isExecuted: false,\n            blockNumber: block.number\n        });\n        txsCount = txId + 1;\n        emit Submission(txId);\n    }\n\n    function confirmTransaction(\n        uint256 txId_\n    ) external onlyAdmin(msg.sender) whenNotConfirmed(txId_, msg.sender) {\n        require(txs[txId_].dst != address(0), \"txId is incorrect\");\n        confirms[txId_][msg.sender] = true;\n        emit Confirmation(msg.sender, txId_);\n    }\n\n    function revokeConfirmation(\n        uint256 txId_\n    ) external onlyAdmin(msg.sender) whenNotExecuted(txId_) {\n        require(confirms[txId_][msg.sender], \"tx is not confirmed\");\n        confirms[txId_][msg.sender] = false;\n        emit Revocation(msg.sender, txId_);\n    }\n\n    function executeTransaction(\n        uint256 txId_\n    ) external whenNotExecuted(txId_) returns (bytes memory) {\n        require(isConfirmed(txId_), \"is not confirmed\");\n        Transaction storage tx_ = txs[txId_];\n        require(tx_.blockNumber + ttl >= block.number, \"tx too old\");\n        tx_.isExecuted = true;\n        emit Execution(txId_, msg.sender);\n        (bool success_, bytes memory data_) = tx_.dst.call{value: tx_.value}(\n            tx_.data\n        );\n        if (success_) {\n            return data_;\n        } else {\n            if (data_.length > 0) {\n                /// @solidity memory-safe-assembly\n                assembly {\n                    let returndata_size := mload(data_)\n                    revert(add(32, data_), returndata_size)\n                }\n            } else {\n                revert(\"no error\");\n            }\n        }\n    }\n\n    function isConfirmed(uint256 txId_) public view returns (bool) {\n        uint128 count = 0;\n        for (uint256 i = 0; i < admins.length; i++) {\n            if (confirms[txId_][admins[i]]) count++;\n            if (count >= quorum) return true;\n        }\n\n        return false;\n    }\n\n    function getConfirmationsCount(\n        uint256 txId_\n    ) external view returns (uint256 count) {\n        for (uint256 i = 0; i < admins.length; i++)\n            if (confirms[txId_][admins[i]]) count++;\n    }\n\n    function getConfirmations(\n        uint256 txId_\n    ) external view returns (address[] memory confirms_) {\n        uint256 i = 0;\n        uint256 count = 0;\n        address[] memory tmp = new address[](admins.length);\n        for (; i < admins.length; i++) {\n            address admin = admins[i];\n            if (confirms[txId_][admin]) {\n                tmp[count] = admin;\n                count++;\n            }\n        }\n\n        confirms_ = new address[](count);\n        for (i = 0; i < count; i++) confirms_[i] = tmp[i];\n    }\n}\n"
    },
    "contracts/Mutex.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nabstract contract Mutex {\n    bool private _lock;\n\n    modifier mutex() {\n        require(!_lock, \"mutex lock\");\n        _lock = true;\n        _;\n        _lock = false;\n    }\n}\n"
    },
    "contracts/Pausable.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./Adminable.sol\";\n\nabstract contract Pausable is Adminable {\n    event Paused(address account);\n    event Unpaused(address account);\n    event PauserUpdated(address sender, address oldPauser, address pauser);\n\n    bool public isPaused;\n    address public pauser;\n\n    constructor() {\n        isPaused = false;\n    }\n\n    modifier whenNotPaused() {\n        require(!isPaused, \"paused\");\n        _;\n    }\n\n    modifier whenPaused() {\n        require(isPaused, \"not paused\");\n        _;\n    }\n\n    modifier onlyPauser() {\n        require(pauser == msg.sender, \"only pauser\");\n        _;\n    }\n\n    function pause() external whenNotPaused onlyPauser {\n        isPaused = true;\n        emit Paused(msg.sender);\n    }\n\n    function unpause() external whenPaused onlyPauser {\n        isPaused = false;\n        emit Unpaused(msg.sender);\n    }\n\n    function updatePauser(address pauser_) external onlyAdmin {\n        require(pauser_ != address(0), \"zero address\");\n        emit PauserUpdated(msg.sender, pauser, pauser_);\n        pauser = pauser_;\n    }\n}\n"
    },
    "contracts/WavesCaller.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.18;\n\nimport \"./AbstractCaller.sol\";\n\ncontract WavesCaller is AbstractCaller {\n    event WavesCallEvent(\n        uint16 callerChainId,\n        uint16 executionChainId,\n        string executionContract,\n        string functionName,\n        string[] args,\n        uint256 nonce\n    );\n\n    bytes16 private constant _SYMBOLS = \"0123456789abcdef\";\n    uint8 private constant _ADDRESS_LENGTH = 20;\n\n    function init(address admin_, uint16 chainId_) external whenNotInitialized {\n        require(admin_ != address(0), \"zero address\");\n        admin = admin_;\n        pauser = admin_;\n        chainId = chainId_;\n        isInited = true;\n    }\n\n    // first argument must be empty (functionArgs_[0] = caller)\n    function call(\n        uint16 executionChainId_,\n        string calldata executionContract_,\n        string calldata functionName_,\n        string[] memory functionArgs_\n    ) external whenInitialized whenAllowed(msg.sender) whenNotPaused {\n        string memory caller = toHexString_(msg.sender);\n        functionArgs_[0] = caller;\n        uint256 nonce_ = nonce;\n        emit WavesCallEvent(\n            chainId,\n            executionChainId_,\n            executionContract_,\n            functionName_,\n            functionArgs_,\n            nonce_\n        );\n        nonce = nonce_ + 1;\n    }\n\n    function toHexString_(address addr) internal pure returns (string memory) {\n        uint256 value = uint256(uint160(addr));\n        bytes memory buffer = new bytes(2 * _ADDRESS_LENGTH + 2);\n        buffer[0] = \"0\";\n        buffer[1] = \"x\";\n        for (uint256 i = 2 * _ADDRESS_LENGTH + 1; i > 1; --i) {\n            buffer[i] = _SYMBOLS[value & 0xf];\n            value >>= 4;\n        }\n        require(value == 0, \"length insufficient\");\n        return string(buffer);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 999999
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}